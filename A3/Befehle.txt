#Docker starten:
docker-compose up -d
docker exec kafka1 kafka-storage.sh random-uuid
docker exec kafka1 kafka-storage.sh format --ignore-formatted --cluster-id <Nummer> --config /opt/bitnami/kafka/config/kraft/server.properties
docker logs kafka1

#Docker direkt komplett starten:
start_kafka_cluster.bat

#Strecken erstellen:
python circular-course.py 2 10 data/track_description.json

#Kafka konfigurieren:
python configurator.py data/track_description.json

#Wagen starten:
python start_and_goal.py start-and-goal-1 3 wagen1
python start_and_goal.py start-and-goal-2 3 wagen2
python start_and_goal.py start-and-goal-1 1 wagen3

# Engpass Test und komplettes Spiel mit 5 Runden simulieren:
python start_and_goal.py start-and-goal-1 5 wagen4
python start_and_goal.py start-and-goal-1 5 wagen5
python start_and_goal.py start-and-goal-1 5 wagen6

#In einem separatem Fenster:
python results_collector.py

#Docker vollst√§ndig beenden:
docker-compose down -v


#Kafka installieren:
pip install kafka-python

#Testen der ClusterID:
docker exec kafka1 cat /bitnami/kafka/data/meta.properties
docker exec kafka2 cat /bitnami/kafka/data/meta.properties
docker exec kafka3 cat /bitnami/kafka/data/meta.properties

docker exec kafka1 curl kafka2:9097
docker exec kafka2 curl kafka3:9098

docker exec kafka1 kafka-topics.sh --describe --topic start-and-goal-1 --bootstrap-server kafka1:9096


